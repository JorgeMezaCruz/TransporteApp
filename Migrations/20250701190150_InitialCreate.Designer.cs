// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransporteApp.Data;

#nullable disable

namespace TransporteApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250701190150_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TransporteApp.Models.Automovil", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Conductor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Automoviles");
                });

            modelBuilder.Entity("TransporteApp.Models.Avion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Copiloto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Piloto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aviones");
                });

            modelBuilder.Entity("TransporteApp.Models.Transporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Ancho")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Largo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumeroPasajeros")
                        .HasColumnType("int");

                    b.Property<int>("NumeroRuedas")
                        .HasColumnType("int");

                    b.Property<int>("Secuencia")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Transportes");
                });

            modelBuilder.Entity("TransporteApp.Models.Automovil", b =>
                {
                    b.HasOne("TransporteApp.Models.Transporte", "Transporte")
                        .WithOne("Automovil")
                        .HasForeignKey("TransporteApp.Models.Automovil", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transporte");
                });

            modelBuilder.Entity("TransporteApp.Models.Avion", b =>
                {
                    b.HasOne("TransporteApp.Models.Transporte", "Transporte")
                        .WithOne("Avion")
                        .HasForeignKey("TransporteApp.Models.Avion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transporte");
                });

            modelBuilder.Entity("TransporteApp.Models.Transporte", b =>
                {
                    b.Navigation("Automovil");

                    b.Navigation("Avion");
                });
#pragma warning restore 612, 618
        }
    }
}
